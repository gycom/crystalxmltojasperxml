const fs = require("fs");
const xml2js = require("xml2js");
const uuidv4 = require('uuid/v4');

if (!fs.existsSync(__dirname+"/crystal.json"))
{
    var parser = new xml2js.Parser();
    fs.readFile(__dirname+"/crystal.xml",{encoding:"utf-8"},(err,data)=>{
        parser.parseString(data,(err,result)=>{
            fs.writeFileSync(__dirname+"/crystal.json",JSON.stringify(result,null,2),"utf-8");
        })
    });
}
else
{
    var data = require("./crystal.json");
    //console.log(data);
    fs.writeFileSync(__dirname+"/crystal.jrxml",jrxmlGenerator(data),{encoding:"utf-8"});
}

function jrxmlGenerator(data)
{
    var crystalname = data.Report.$.path.substr(data.Report.$.path.lastIndexOf("\\")+1);
    return `<?xml version="1.0" encoding="UTF-8"?>
    <!-- Generated by CyFrame tool CrystalXMLtoJasperXML  -->
    <jasperReport xmlns="http://jasperreports.sourceforge.net/jasperreports" 
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
            xsi:schemaLocation="http://jasperreports.sourceforge.net/jasperreports http://jasperreports.sourceforge.net/xsd/jasperreport.xsd" 
            name="${crystalname}" 
            pageWidth="612" 
            pageHeight="792" 
            columnWidth="555" 
            leftMargin="20" 
            rightMargin="20" 
            topMargin="20" 
            bottomMargin="20" 
            uuid="47c5c163-17f9-48e0-9e0b-ba15ad668cfa">
    ${ReportSpec(data)}
    </jasperReport>`;
}

function ReportSpec(data)
{
    return `
    ${Property(data)}
    ${Querystring(data)}
    ${Fields(data)}
    ${ReportBody(data)}
    `;
}

function Property(data)
{
    return `<property name="com.jaspersoft.studio.data.sql.tables" value=""/>
	<property name="com.jaspersoft.studio.data.sql.SQLQueryDesigner.sash.w1" value="479"/>
	<property name="com.jaspersoft.studio.data.sql.SQLQueryDesigner.sash.w2" value="521"/>
	<property name="com.jaspersoft.studio.data.defaultdataadapter" value="mytest"/>
	`;
}

function Querystring(data)
{
    return `<queryString>
    <![CDATA[SELECT * FROM dual]]>
    </queryString>`;
}

function Fields(data)
{
    return data.Report.Fieldnames[0].fieldname.map(e=>{
        return `<field name="${e.$.name}" class="java.lang.${e.$.valuetype||"String"}">
		<property name="com.jaspersoft.studio.field.label" value="${e.$.name}"/>
		<property name="com.jaspersoft.studio.field.tree.path" value="${e.$.name}"/>
	</field>
	`;
    }).join("\n");
}

function ReportBody(data)
{
    return `
    ${Background(data)}
    ${Title(data)}
    ${PageHeader(data)}
    ${ColumnHeader(data)}
    ${Detail(data)}
    ${ColumnFooter(data)}
    ${PageFooter(data)}
    ${Summary(data)}
    `;
}
function twip2pixel(twip) 
{
    return Math.ceil((twip||0) / 1440 * 48); // 
}
function Background(data)
{
    return `<background>
    <band splitType="Stretch"/>
    </background>
    `;
}

function Band(section)
{
    if (!section) return "";
    var keepTogether = section.KeepTogether[0].Value=="True"?"Prevent":"Stretch";
    var obj = section.ReportObjects[0].Object;

    return `<band height="${twip2pixel(+section.Height[0].$.Value)}" splitType="${keepTogether}">
    ${obj?obj.map(ReportObject).join("\n"):""}
    </band>`;
}

function Title(data)
{
    var rh = data.Report.Area.filter(a=>a.$.type=="Report Header");
    if (rh.length!=0)
    var bands = rh[0].Sections[0].Section.map(Band).join("");
    return `<title>
    ${bands}
    </title>`;
}

function PageHeader(data)
{
    var rh = data.Report.Area.filter(a=>a.$.type=="Page Header");
    if (rh.length!=0)
    var bands = rh[0].Sections[0].Section.map(Band).join("");
    return `<pageHeader>
    ${bands}
    </pageHeader>
`;
}

function ColumnHeader(data)
{
    var rh = data.Report.Area.filter(a=>a.$.type=="Group Header");
    if (rh.length!=0)
    var bands = rh[0].Sections[0].Section.map(Band).join("");
    return `<columnHeader>
    ${bands}
    </columnHeader>
    `;
}

function Detail(data)
{
    var rh = data.Report.Area.filter(a=>a.$.type=="Detail");
    if (rh.length!=0)
    var bands = rh[0].Sections[0].Section.map(Band).join("");
    return `<detail>
    ${bands}
    </detail>
    `;
}

function ColumnFooter(data)
{
    var rh = data.Report.Area.filter(a=>a.$.type=="Group Footer");
    if (rh.length!=0)
    var bands = rh[0].Sections[0].Section.map(Band).join("");
    return `<columnFooter>
    ${bands}
    </columnFooter>
    `;
}

function PageFooter(data)
{
    var rh = data.Report.Area.filter(a=>a.$.type=="Page Footer");
    //console.log(rh)
    if (rh.length!=0)
    if (rh[0].Sections.length!=0)
    var bands = rh[0].Sections[0].Section.map(Band).join("");
    return `<pageFooter>
    ${bands}
    </pageFooter>
    `;
}

function Summary(data)
{
    var rh = data.Report.Area.filter(a=>a.$.type=="Report Footer");
    if (rh.length!=0)
    var bands = rh[0].Sections[0].Section.map(Band).join("");
    return `<summary>
    ${bands}
    </summary>`;
}

function ReportObject(o)
{
    //console.log(o.fielddefinition)
    var element = `<!-- ${o.$.Type} ${o.$.name}-->
    <reportElement 
    x="${twip2pixel(+o.$.left||0)}" 
    y="${twip2pixel(+o.$.top||0)}"  
    width="${twip2pixel(+o.$.width||3000)}" 
    height="${twip2pixel(+o.$.height||100)}" 
    uuid="${guid()}">
</reportElement>
`;
//<property name="com.jaspersoft.studio.spreadsheet.connectionID" value="${guid()}"/>

    switch(o.$.Type)
    {
        case "Database Field":
                return DatabaseField(o);
            case "Box":
                return `<rectangle>
                ${element}
                </rectangle>`;
            case "Line":
                return `<line>
                ${element}
                </line>`;
            case "Text":
                return `<staticText>
                ${element}
                <text><![CDATA[___static_text___]]></text>
                </staticText>`;
        case "Ole":
                return `<image>
                ${element}
                <imageExpression><![CDATA[""]]></imageExpression>
                </image>`;
        default:
                return "????"
        }

    function DatabaseField(o)
    {
//console.log(o.fielddefinition[0].$.kind)
        switch(+o.fielddefinition[0].$.kind)
        {
            case 1: // Database
                    return `<textField>
                        ${element}
                        <textFieldExpression><![CDATA[$F{${o.fielddefinition[0].databasefieldname[0]._}}]]></textFieldExpression>
                        </textField>`;
            case 2: // Formula
                    return `<textField>
                        ${element}
                        <textFieldExpression><![CDATA[$F{${o.fielddefinition[0].formula[0]._}}]]></textFieldExpression>
                        </textField>`;
            case 3: // Summary
                    return `<textField>
                        ${element}
                        <textFieldExpression><![CDATA[$F{${o.fielddefinition[0].summary[0].summarizedfield[0].$.name}}]]></textFieldExpression>
                        </textField>`;
            case 4: // Special
                    return `<textField>
                        ${element}
                        <textFieldExpression><![CDATA[$F{${o.fielddefinition[0].$.name}}]]></textFieldExpression>
                        </textField>`;
            case 5: // ?
                    return `<textField />`
            case 6: // ParameterField
                    return `<textField>
                        ${element}
                        <textFieldExpression><![CDATA[$F{${o.fielddefinition[0].$.name}}]]></textFieldExpression>
                        </textField>`;
            case 7: // Running Total
                    return `<textField>
                        ${element}
                        <textFieldExpression><![CDATA[$F{${o.fielddefinition[0].runningtotal[0].summarizedfield[0].$.name}}]]></textFieldExpression>
                        </textField>`;
            default: return "grrr"
        }
    }
}

function guid()
{
    return uuidv4();//"b14cbeff-8b3a-47aa-aa4d-7f12699ba0e1";
}